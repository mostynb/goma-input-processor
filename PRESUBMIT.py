# Copyright 2012 The Goma Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Top-level presubmit script for goma/client.

To run presubmit,
  $ git cl presubmit --upload

See http://dev.chromium.org/developers/how-tos/depottools/presubmit-scripts
for more details about the presubmit API built into git-cl.
"""

USE_PYTHON3 = True


def CheckChangeLintsClean(input_api, output_api):
  """Checks that all '.cc' and '.h' files pass cpplint.py.

  It is clone of depot_tools/presubmit_canned_checks.py, but hacks on
  cpplint.GetHeaderGuardCPPVariable, because our code uses 'DEVTOOLS_GOMA_'
  prefix for header guard.
  """
  _RE_IS_TEST = input_api.re.compile(r'.*tests?.(cc|h)$')
  result = []
  input_api.cpplint._cpplint_state.ResetErrorCounts()
  getHeaderGuardCPPVariable = input_api.cpplint.GetHeaderGuardCPPVariable
  def gomaGetHeaderGuardCPPVariable(filename):
    return 'DEVTOOLS_GOMA_' + getHeaderGuardCPPVariable(filename)
  input_api.cpplint.GetHeaderGuardCPPVariable = gomaGetHeaderGuardCPPVariable

  input_api.cpplint._SetFilters('-build/include,-build/include_order,'
                                '-readability/casting,-runtime/int')

  def Filter(affected_file):
    return input_api.FilterSourceFile(
        affected_file,
        files_to_skip=input_api.DEFAULT_FILES_TO_SKIP + (r".+\.pb\.(h|cc)$",))

  files = [f.AbsoluteLocalPath() for f in
           input_api.AffectedSourceFiles(Filter)]
  for file_name in files:
    if _RE_IS_TEST.match(file_name):
      level = 5
    else:
      level = 4
    input_api.cpplint.ProcessFile(file_name, level)

  if input_api.cpplint._cpplint_state.error_count > 0:
    if input_api.is_committing:
      res_type = output_api.PresubmitError
    else:
      res_type = output_api.PresubmitPromptWarning
    result = [res_type('Changelist failed cpplint.py check.')]

  return result


def CheckGNGenChecked(input_api, output_api):
  if not input_api.AffectedFiles(
      file_filter=lambda x: x.LocalPath().endswith('.c') or
                            x.LocalPath().endswith('.cc') or
                            x.LocalPath().endswith('.gn') or
                            x.LocalPath().endswith('.gni') or
                            x.LocalPath().endswith('.h') or
                            x.LocalPath().endswith('.typemap')):
    return []

  warnings = []
  with input_api.tempfile.TemporaryDirectory() as tmpdir:
    gn_path = input_api.os_path.join(
        input_api.gclient_paths.GetBuildtoolsPlatformBinaryPath(),
        'gn' + input_api.gclient_paths.GetExeSuffix())
    cmd = [gn_path, 'gen', '--root=%s' % input_api.change.RepositoryRoot(),
           '--check', tmpdir]
    proc = input_api.subprocess.Popen(
        cmd, stdout=input_api.subprocess.PIPE, stderr=input_api.subprocess.PIPE)
    proc.wait()
    if proc.returncode != 0:
      warnings.append(output_api.PresubmitPromptWarning(
          'Failed to run "gn gen --check".'))
  return warnings


def CheckLucicfg(input_api, output_api):
  tests = []
  # if any *.star file in infra/config is modified
  # validate it by using infra/config/main.star as entrypoint.
  files = [
      f.AbsoluteLocalPath()
      for f in input_api.AffectedFiles(file_filter=lambda x: (x.LocalPath(
      ).endswith('.star') and x.LocalPath().startswith(
          input_api.os_path.join('infra', 'config'))))
  ]
  if files:
    tests += input_api.canned_checks.CheckLucicfgGenOutput(
        input_api, output_api,
        input_api.os_path.join('infra', 'config', 'main.star'))
  return input_api.RunTests(tests)


def CheckChangeOnUpload(input_api, output_api):
  def source_file_filter(x):
    third_party_files = (
        # todo missed owner
        'build/config/mac/sdk_info.py',
        # longer line
        'build/config/mac/mac_sdk.gni',
        # longer line from https://pki.goog/roots.pem
        'client/certs/roots.pem',
        'test/goma_data.pb.cc',
        'test/goma_data.pb.h',
        '.style.yapf',
        'third_party/boringssl/err_data.c',
    )
    # We don't write assembly by ourselves.  We assume them auto-generated
    # files.
    if x.LocalPath().endswith('.S') or x.LocalPath().endswith('.asm'):
      return False
    # Ignore files auto-generated by lucicfg.
    if x.LocalPath().endswith('.cfg') and x.LocalPath().startswith(
        input_api.os_path.join('infra', 'config', 'generated')):
      return False
    return x.LocalPath() not in third_party_files

  def license_header_filter(x):
    if x.LocalPath().endswith(".md"):
      return False
    if input_api.os_path.basename(x.LocalPath()) == 'OWNERS':
      return False
    if x.LocalPath().startswith(
        input_api.os_path.join('third_party', 'config')):
      return False
    if x.LocalPath().startswith('third_party') and input_api.os_path.basename(
        x.LocalPath()).startswith('README'):
      return False
    return source_file_filter(x)

  def long_line_filter(x):
    if x.LocalPath().endswith(".go"):
      return False
    if x.LocalPath().endswith(".star"):
      return False
    if input_api.os_path.basename(x.LocalPath()) == 'OWNERS':
      return False
    return source_file_filter(x)

  results = []
  results += input_api.canned_checks.CheckChangeHasDescription(
      input_api, output_api)
  results += CheckChangeLintsClean(input_api, output_api)
  results += input_api.canned_checks.CheckChangeHasNoCrAndHasOnlyOneEol(
      input_api, output_api)
  results += input_api.canned_checks.CheckPatchFormatted(input_api, output_api)
  results += input_api.canned_checks.CheckChangeHasNoTabs(
      input_api, output_api)
  results += input_api.canned_checks.CheckChangeTodoHasOwner(
      input_api, output_api, source_file_filter=source_file_filter)
  results += input_api.canned_checks.CheckChangeHasNoStrayWhitespace(
      input_api, output_api, source_file_filter=source_file_filter)
  results += input_api.canned_checks.CheckLongLines(
      input_api, output_api, 80, source_file_filter=long_line_filter)
  results += input_api.canned_checks.CheckLicense(
      input_api,
      output_api,
      r'(Copyright 20\d\d Google LLC.|' +
      'Copyright.*The Chromium Authors. All rights reserved.|' +
      'Copyright.*The Goma Authors. All rights reserved.)',
      source_file_filter=license_header_filter)
  results += input_api.canned_checks.CheckDoNotSubmit(
      input_api, output_api)
  results += input_api.canned_checks.RunPylint(
      input_api,
      output_api,
      files_to_skip=(
          r'build[\\/]config[\\/]mac[\\/].*',
          r'build[\\/]mac[\\/].*',
          r'build[\\/]mac_toolchain.py',
          r'build[\\/]tools[\\/].*',
          r'build[\\/]vs_toolchain.py',
          r'buildtools[\\/].*',
          r'out[\\/].*',
          r'third_party[\\/].*',
          r'tools[\\/].*',
      ),
      version='2.6')
  results += input_api.canned_checks.CheckGNFormatted(input_api, output_api)
  results += CheckGNGenChecked(input_api, output_api)
  results += CheckLucicfg(input_api, output_api)
  return results
