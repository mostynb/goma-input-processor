# Copyright 2014 The Goma Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  # Define this to change default backend URL.
  default_server_host = ""

  # Define this to change default compiler_proxy port number.
  default_compiler_proxy_port = -1

  # Define this to change default compiler_proxy IPC filename.
  default_compiler_proxy_socket_name = ""

  # Define this to change default project suffic name.
  default_project_suffix = ""
}

config("debug") {
  defines = [ "_DEBUG" ]
  if (os == "linux") {
    defines += [ "_GLIBCXX_DEBUG=1" ]
  }
}

config("release") {
  defines = [ "NDEBUG" ]
}

config("default_libs") {
  if (os == "win" && !is_win_gcc) {
    libs = [
      "advapi32.lib",
      "delayimp.lib",
      "psapi.lib",
      "shell32.lib",
    ]

    # These are to avoid loading gdi32.dll.
    # See b/115990434
    ldflags = [
      # This is for absl/base/internal/sysinfo.cc .
      "/DELAYLOAD:shlwapi.dll",

      # This is for GetUserNameA.
      "/DELAYLOAD:advapi32.dll",
    ]
  }

  # Make sure libc++ is used instead of libstdc++. See b/123161046
  if (use_custom_libcxx && is_clang && os == "linux") {
    ldflags = [ "-nostdlib++" ]
  }
}

group("common_deps") {
  # //build/config:commond_deps is in libc++'s visibility target.
  if (use_custom_libcxx) {
    public_deps = [ "//buildtools/third_party/libc++" ]
  }
}

# Dependencies that all executables and shared libraries should have.
group("exe_and_shlib_deps") {
  public_deps = []
  if (using_sanitizer) {
    public_deps += [ "//build/config/sanitizers:deps" ]
  }

  public_deps += [ ":common_deps" ]

  #if (use_afl) {
  #  public_deps += [ "//third_party/afl" ]
  #}
}

# Dependencies that libFuzzer needs when using custom libc++
group("fuzzer_test_deps") {
  public_deps = [ ":common_deps" ]
}

config("feature_flags") {
  defines = []
  if (is_asan) {
    defines += [ "ADDRESS_SANITIZER" ]
  }
  if (is_tsan) {
    defines += [
      "THREAD_SANITIZER",
      "DYNAMIC_ANNOTATIONS_ENABLED=1",
    ]
  }
  if (is_msan) {
    defines += [ "MEMORY_SANITIZER" ]
  }
}

config("defaults") {
  defines = []
  if (default_server_host != "") {
    defines += [ "DEFAULT_SERVER_HOST=\"$default_server_host\"" ]
  }
  if (default_compiler_proxy_port != -1) {
    defines += [ "DEFAULT_COMPILER_PROXY_PORT=$default_compiler_proxy_port" ]
  }
  if (default_compiler_proxy_socket_name != "") {
    defines += [ "DEFAULT_COMPILER_PROXY_SOCKET_NAME=\"$default_compiler_proxy_socket_name\"" ]
  }
  if (default_project_suffix != "") {
    defines += [ "DEFAULT_PROJECT_SUFFIX=\"$default_project_suffix\"" ]
  }
}
